"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeFileContent = exports.test = void 0;
const file_loader_1 = require("./file-loader");
const file_parser_1 = require("./file-parser");
const file_scanner_1 = require("./file-scanner");
const results_formatter_1 = require("./results-formatter");
const detect_1 = require("../../../../lib/detect");
const local_cache_1 = require("./local-cache");
// this method executes the local processing engine and then formats the results to adapt with the CLI output.
// the current version is dependent on files to be present locally which are not part of the source code.
// without these files this method would fail.
// if you're interested in trying out the experimental local execution model for IaC scanning, please reach-out.
async function test(pathToScan, options) {
    await local_cache_1.initLocalCache();
    const filesToParse = await file_loader_1.loadFiles(pathToScan);
    const { parsedFiles, failedFiles } = await file_parser_1.parseFiles(filesToParse);
    const scannedFiles = await file_scanner_1.scanFiles(parsedFiles);
    const formattedResults = results_formatter_1.formatScanResults(scannedFiles, options);
    if (detect_1.isLocalFolder(pathToScan)) {
        // TODO: This mutation is here merely to support how the old/current directory scan printing works.
        // NOTE: No file or parsed file data should leave this function.
        options.iacDirFiles = [...parsedFiles, ...failedFiles].map(removeFileContent);
    }
    // TODO: add support for proper typing of old TestResult interface.
    return formattedResults;
}
exports.test = test;
function removeFileContent({ filePath, fileType, failureReason, projectType, }) {
    return {
        filePath,
        fileType,
        failureReason,
        projectType,
    };
}
exports.removeFileContent = removeFileContent;
//# sourceMappingURL=index.js.map