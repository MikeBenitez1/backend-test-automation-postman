import { IacProjectType } from '../../../../lib/iac/constants';
import { SEVERITY } from '../../../../lib/snyk-test/common';
import { IacFileInDirectory } from '../../../../lib/types';
export interface IacFileData extends IacFileInDirectory {
    fileContent: string;
}
export declare const VALID_FILE_TYPES: string[];
export interface IacFileParsed extends IacFileData {
    jsonContent: Record<string, unknown> | TerraformScanInput;
    engineType: EngineType;
    docId?: number;
}
export interface IacFileParseFailure extends IacFileData {
    jsonContent: null;
    engineType: null;
    failureReason: string;
    err: Error;
}
export declare type ScanningResults = {
    scannedFiles: Array<IacFileScanResult>;
    unscannedFiles: Array<IacFileParseFailure>;
};
export declare type ParsingResults = {
    parsedFiles: Array<IacFileParsed>;
    failedFiles: Array<IacFileParseFailure>;
};
export interface IacFileScanResult extends IacFileParsed {
    violatedPolicies: PolicyMetadata[];
}
export declare type FormattedResult = {
    result: {
        cloudConfigResults: Array<PolicyMetadata>;
    };
    isPrivate: boolean;
    packageManager: IacProjectType;
    targetFile: string;
};
export interface OpaWasmInstance {
    evaluate: (data: Record<string, any>) => {
        results: PolicyMetadata[];
    };
    setData: (data: Record<string, any>) => void;
}
export declare type SafeAnalyticsOutput = Omit<IacFileParsed | IacFileParseFailure, 'fileContent' | 'jsonContent' | 'engineType'>;
export declare enum EngineType {
    Kubernetes = 0,
    Terraform = 1
}
export interface PolicyMetadata {
    id: string;
    publicId: string;
    type: string;
    subType: string;
    title: string;
    description: string;
    severity: SEVERITY;
    msg: string;
    policyEngineType: 'opa';
    issue: string;
    impact: string;
    resolve: string;
    references: string[];
}
export interface IacOptionFlags {
    iacDirFiles?: Array<IacFileInDirectory>;
    severityThreshold?: SEVERITY;
}
export interface TerraformPlanResource {
    address: string;
    mode: string;
    type: string;
    name: string;
    provider_name: string;
    schema_version: number;
    values: Record<string, unknown>;
    index: number;
}
export interface TerraformPlanJson {
    planned_values: {
        root_module: {
            resources: Array<TerraformPlanResource>;
            child_modules: Array<{
                resources: Array<TerraformPlanResource>;
            }>;
        };
    };
}
export interface TerraformScanInput {
    resource: Record<string, Record<string, unknown>>;
    data: Record<string, Record<string, unknown>>;
}
export interface TerraformPlanResource {
    type: string;
    name: string;
    values: Record<string, unknown>;
}
