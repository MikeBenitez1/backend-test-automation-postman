"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initLocalCache = exports.getLocalCachePath = exports.REQUIRED_LOCAL_CACHE_FILES = exports.LOCAL_POLICY_ENGINE_DIR = void 0;
const path = require("path");
const fs = require("fs");
const types_1 = require("./types");
const needle = require("needle");
const file_utils_1 = require("./file-utils");
exports.LOCAL_POLICY_ENGINE_DIR = '.iac-data';
const KUBERNETES_POLICY_ENGINE_WASM_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'k8s_policy.wasm');
const KUBERNETES_POLICY_ENGINE_DATA_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'k8s_data.json');
const TERRAFORM_POLICY_ENGINE_WASM_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'tf_policy.wasm');
const TERRAFORM_POLICY_ENGINE_DATA_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'tf_data.json');
exports.REQUIRED_LOCAL_CACHE_FILES = [
    KUBERNETES_POLICY_ENGINE_WASM_PATH,
    KUBERNETES_POLICY_ENGINE_DATA_PATH,
    TERRAFORM_POLICY_ENGINE_WASM_PATH,
    TERRAFORM_POLICY_ENGINE_DATA_PATH,
];
function doesLocalCacheExist() {
    return exports.REQUIRED_LOCAL_CACHE_FILES.every(fs.existsSync);
}
function getLocalCachePath(engineType) {
    switch (engineType) {
        case types_1.EngineType.Kubernetes:
            return [
                `${process.cwd()}/${KUBERNETES_POLICY_ENGINE_WASM_PATH}`,
                `${process.cwd()}/${KUBERNETES_POLICY_ENGINE_DATA_PATH}`,
            ];
        case types_1.EngineType.Terraform:
            return [
                `${process.cwd()}/${TERRAFORM_POLICY_ENGINE_WASM_PATH}`,
                `${process.cwd()}/${TERRAFORM_POLICY_ENGINE_DATA_PATH}`,
            ];
    }
}
exports.getLocalCachePath = getLocalCachePath;
async function initLocalCache() {
    // temporarily use an ENV var to skip downloading of the bundles if we need to - e.g. smoke tests
    if (!process.env.SNYK_IAC_SKIP_BUNDLE_DOWNLOAD) {
        const preSignedUrl = 'https://cloud-config-policy-bundles.s3-eu-west-1.amazonaws.com/bundle.tar.gz';
        file_utils_1.createIacDir();
        const response = needle.get(preSignedUrl);
        await file_utils_1.extractBundle(response);
    }
    if (!doesLocalCacheExist()) {
        throw Error(`Missing IaC local cache data, please validate you have: \n${exports.REQUIRED_LOCAL_CACHE_FILES.join('\n')}`);
    }
}
exports.initLocalCache = initLocalCache;
//# sourceMappingURL=local-cache.js.map