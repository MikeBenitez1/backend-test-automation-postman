"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParsingTerraformPlan = void 0;
const types_1 = require("../types");
function terraformPlanReducer(scanInput, resource) {
    // TODO: investigate if this reduction logic covers all edge-cases (nested modules, similar names, etc')
    const { type, name, mode, index, values } = resource;
    const inputKey = mode === 'data' ? 'data' : 'resource';
    if (scanInput[inputKey][type]) {
        // add new resources of the same type with different names
        scanInput[inputKey][type][index !== undefined ? `${name}_${index}` : name] =
            values || {};
    }
    else {
        // add a new resource type
        scanInput[inputKey][type] = { [name]: values };
    }
    return scanInput;
}
function extractRootModuleResources(terraformPlanJson) {
    var _a, _b;
    return ((_b = (_a = terraformPlanJson === null || terraformPlanJson === void 0 ? void 0 : terraformPlanJson.planned_values) === null || _a === void 0 ? void 0 : _a.root_module) === null || _b === void 0 ? void 0 : _b.resources) || [];
}
function extractChildModulesResources(terraformPlanJson) {
    var _a, _b;
    const childModules = ((_b = (_a = terraformPlanJson === null || terraformPlanJson === void 0 ? void 0 : terraformPlanJson.planned_values) === null || _a === void 0 ? void 0 : _a.root_module) === null || _b === void 0 ? void 0 : _b.child_modules) || [];
    const extractedChildModuleResources = childModules.flatMap((childModule) => childModule.resources);
    return extractedChildModuleResources;
}
function tryParsingTerraformPlan(terraformPlanFile) {
    let terraformPlanJson;
    try {
        terraformPlanJson = JSON.parse(terraformPlanFile.fileContent);
    }
    catch (err) {
        throw new Error('Failed to parse Terraform plan JSON file.');
    }
    try {
        const rootModuleResources = extractRootModuleResources(terraformPlanJson);
        const childModuleResources = extractChildModulesResources(terraformPlanJson);
        const parsedInput = [
            ...rootModuleResources,
            ...childModuleResources,
        ].reduce(terraformPlanReducer, { resource: {}, data: {} });
        return [
            Object.assign(Object.assign({}, terraformPlanFile), { jsonContent: parsedInput, engineType: types_1.EngineType.Terraform }),
        ];
    }
    catch (err) {
        throw new Error('Failed to extract resources from Terraform plan JSON file.');
    }
}
exports.tryParsingTerraformPlan = tryParsingTerraformPlan;
//# sourceMappingURL=terraform-plan-parser.js.map